Pokemon Classes Log

<Lalapinkbun>

===================================================
=======================1.0=========================
===================================================

v1.0 Beta
- New Create Pokemon, Move, TypeChart Class in LalaPokemon Classes.
- and There Have Base Pokemon thing

v1.1 Beta
- Add The typeChartIneffetive and Change [typeChart -> typeChartEffetive]
- Add The Ineffetive Dictionary Into The ReadTypeChart()
- Fix typeChartEffetive In Fire Wrong Type, [Rock -> Bug]
- Change [Bool IsTypeEffective(...) -> Float IsTypeEffectiveAndCountPlusDamage(...)] and Fix To Output The x2, 1 and x0.5
- Fix The Because Update IsTypeEffectiveAndCountPlus Damage(...) And Have Error In [Move] Class

v1.2 Beta
- Add The Two Evolution Void In Pokemon Class (1. one type 2. two type)
- Add The Item Class.
- Fix The Possible Null From Pokemon Class [Type 2]

v1.3 Beta
- Minor Update GetPokemonTypeTwo() in Pokemon Class.
- Added ...C suffixes and ...M suffixes In Pokemon Class Data Type Name, these suffixes represent "Current" and "Max" respectively.
====================
[Changed]
- Attack -> AttackC
- Defend -> DefendC
- SpecialAttack -> SpecialAttackC
- SpecialDefend -> SpecialDefendC
- Speed -> SpeedC
[Added]
- AttackM
- DefendM
- SpecialAttackM
- SpecialDefendM
- SpeedM
====================
- Fix The Error When Update The ...C and ...M suffixes in All Classes.
- Add The BackToDefault() Function in Pokemon Class.
- Add The LevelUp() Funchtion in Pokemon Class.

v1.3.1 Beta
- Fix The Problem of TypeChart Class typeChartEffective.ContainsKey(attackerType) <---- The calculation of attribute restraint is actually based on the attributes of the attacker.
In order to consider that Pokémon may have another attribute, we also made the following changes:
====Changed====
-> IsTypeEffectiveAndCountPlusDamage(string attackerType, string defenderType) to IsTypeEffectiveAndCountPlusDamage(Pokemon attackerType, Pokemon defenderType)
-> if (typeChartEffective.ContainsKey(defenderType) { } to if (typeChartEffective.ContainsKey(defenderType.GetPokemonType())) { }
====Added====
-> if (!(defenderType.GetPokemonTypeTwo() == "No Second Type"))
    {
        if (typeChartEffective.ContainsKey(defenderType.GetPokemonTypeTwo()))
        {
            plusDamage = xxx;
        }
    }
- Fix The Error When Fix The TypeChart Class in Move Class

===================================================
========================2.0========================
===================================================

v2.0 Beta -> Item Update
- Add The More UseFull Method for Various items in Item Class
- Add The Method Can Read Moves Data In Pokemon Class
- Add The Method Can Read or Change The Data ...M suffixes In Pokemon Class
- The Move Class Date Change To [public string xxx { get; }.etc -> private string xxx;.etc]
- And Add The Method Can Read or Change Data in Move Class Data
=====The current methods in Item can do:=====
In Use
-> Posion => Recover The Pokemon Hp
-> PP => Restore the PP of one move.
-> Statistic => Improve some statistics of Pokémon
-> Ability => Change Pokemon Ability
-> EvolutionStone => Using Evolution Item For Pokemon Evolution
Unused [Will Update After v2.0 Beta Item Update]
-> Repel => Wild Pokémon will not appear for a short period of time
-> PokeBall => Used to catch Pokemon
-> Mint => Give Pokemono smelling The mint can make the Pokémon easier or harder(one of each) to increase the Pokémon's Stat.

Note: There are still many items that I haven’t added yet, they will be added in future updates!
=============================================
- Add New Namecpacce and Class New Data Type [Lalapokemon.DataType.PokemonStat]
=> Lalapokemon.DataType.PokemonStat.statType
=> Lalapokemon.DataType.PokemonStat.Mint
=> Lalapokemon.DataType.PokemonStat.Evolution
=> Lalapokemon.DataType.PokemonStat.Apricorn
=> Lalapokemon.DataType.PokemonStat.Carry [Not Done Yet]

os: The Item had REALLY A LOT OF ITEM, Producing alone is really time-consuming and difficult.